mod arrays;
mod borrowing;
mod conditionals;
mod enums;
mod error_handling;
mod file_formatter;
mod general;
mod loops;
mod strings;
mod structs;
mod debugger;

fn main() {
    general::print_demo();
    println!("--------------");
    file_formatter::file_formatter();
    println!("--------------");
    // debugger::greetings();
    println!("--------------");
    let input = "Reverse this string!";
    let reversed = general::reverse_string(input.to_string());
    println!("The reversed string is: {}", reversed);
    println!("--------------");
    general::shadowing();
    println!("--------------");
    general::variables();
    println!("--------------");
    general::mutability();
    println!("--------------");
    conditionals::conditional();
    println!("--------------");
    general::options();
    println!("--------------");
    loops::loop_demo();
    println!("--------------");
    // loops::while_loop();
    println!("--------------");
    loops::for_loop();
    println!("--------------");
    // conditionals::match_demo();
    println!("--------------");
    arrays::arrays_demo();
    println!("--------------");
    arrays::vectors_demo();
    println!("--------------");
    arrays::vectors();
    println!("--------------");
    arrays::hash_map_demo();
    println!("--------------");
    let numbers = [1, 2, 3];
    general::print_sum(&numbers);
    println!("--------------");
    let numbers = [1, 2, 3, -5];
    // error_handling::process_numbers(&numbers);
    println!("--------------");
    let chunk = strings::split_string("Hello, World, Rahul".to_string(), ',', 2);
    println!("The chunk is: {}", chunk);
    println!("--------------");
    general::option();
    println!("--------------");
    strings::use_string();
    println!("--------------");
    strings::use_vectors();
    println!("--------------");
    strings::string_manipulation();
    println!("--------------");
    strings::longest();
    println!("--------------");
    structs::use_struct();
    println!("--------------");
    enums::use_enum();
    println!("--------------");
    borrowing::borrow();
    println!("--------------");
    // error_handling::loop_and_panic(vec![1, 2, 3, 4, -5]);
    println!("--------------");
    error_handling::handle_error();
    println!("--------------");
}
